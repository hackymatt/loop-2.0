name: Testing

on:
  pull_request:
    branches: [develop]

jobs:
  changes:
    name: Detect file changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt-get install -y libjpeg-dev
          python -m pip install --upgrade pip
          pip install -r requirements-lint.txt
          pip install -r requirements.txt
          pylint core --recursive=true --fail-under=10
          black . --check

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        shell: bash
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4
      - run: |
          npm install --legacy-peer-deps
          npm run fm:check
          npm run lint:check

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    defaults:
      run:
        shell: bash
        working-directory: backend

    env:
      LOCAL: ${{ secrets.LOCAL }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_URL: ${{ secrets.REDIS_URL }}
      CONTACT_EMAIL: ${{ secrets.CONTACT_EMAIL }}
      NOREPLY_EMAIL: ${{ secrets.NOREPLY_EMAIL }}
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      DUMMY_STUDENT_EMAIL: ${{ secrets.DUMMY_STUDENT_EMAIL }}
      DUMMY_STUDENT_PASSWORD: ${{ secrets.DUMMY_STUDENT_PASSWORD }}

    services:
      redis:
        image: redis:7.2.5-bookworm
        ports: [6379:6379]
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: [5432:5432]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt-get install -y libjpeg-dev
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          pip install -r requirements.txt
          pip install django-cors-headers
          coverage run manage.py test
          coverage report

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        shell: bash
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4
      - run: |
          npm install --legacy-peer-deps
          npm run test:coverage
